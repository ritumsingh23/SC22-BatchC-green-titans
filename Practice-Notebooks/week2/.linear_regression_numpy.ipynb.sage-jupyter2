{"backend_state":"init","connection_file":"/projects/d5de4790-84b9-4555-9a80-ef455fafa128/.local/share/jupyter/runtime/kernel-1bada20b-2270-44ce-a15c-24955fcdaf98.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"linear_regression_numpy_tutorial.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0b56ae","input":"","metadata":{"id":"ox6WlPb7a-sa"},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0d6bf7","input":"","metadata":{"id":"owTTVO4Ba-sY"},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"75d488","input":"","metadata":{"id":"VPv4Rha8a-sa"},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8d199c","input":"","metadata":{"id":"mdxlUKLka-sZ"},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"904bd6","input":"","metadata":{"id":"7ubqNNVxa-sZ"},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b79a45","input":"","metadata":{"id":"bUuZFIRxa-sZ"},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c4039f","input":"","metadata":{"id":"8vkl-uJMa-sZ"},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f48c4e","input":"","metadata":{"id":"cvxyHdHha-sa"},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f65415","input":"","metadata":{"id":"l5xP_R3ya-sZ"},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"17249e","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt","metadata":{"executionInfo":{"elapsed":31,"status":"ok","timestamp":1627498066861,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"IecuRdF1a-sG"},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"22726f","input":"# initialize your random seed to ensure reproducibility of your result\nnp.random.seed(100)\n\n# Initializes parameters \"a\" and \"b\" randomly - they don't need to be good yet\na = np.random.randn(1)\nb = np.random.randn(1)\n\n# print values of a and b \nprint(a, b)\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":241,"status":"ok","timestamp":1627498594869,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"MjeQPrOKa-sP","outputId":"fe881c09-932e-46f0-9f40-79b6b5c69617"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[-1.74976547] [0.3426804]\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"691858","input":"# Initialization of hyper-parameters (in our case, only learning rate and number of epochs)\n\n# Sets learning rate (how much the AI conforms to each set of feedbacks)\nlr = 1e-1\n# Defines number of epochs (how many times training is repeated)\nn_epochs = 1000","metadata":{"executionInfo":{"elapsed":240,"status":"ok","timestamp":1627498605594,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"xaIPfjB1a-sP"},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"00a57c","input":"for epoch in range(n_epochs):\n    # Computes our model's predicted output\n    yhat = b * x_train + a\n    \n    # How wrong is our model? That's the error! \n    error = (y_train - yhat)\n    \n    # It is a regression, so it computes mean squared error (MSE)\n    loss = (error ** 2).mean()\n    \n    # Computes gradients for both \"a\" and \"b\" parameters\n    a_grad = -2 * error.mean()\n    b_grad = -2 * (x_train * error).mean()\n    \n    # Updates parameters using gradients and the learning rate\n    a = a - lr * a_grad\n    b = b - lr * b_grad\n    \nprint(a, b)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":230,"status":"ok","timestamp":1627499222901,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"IEGhbnhoa-sQ","outputId":"6df14990-801c-4030-bd27-e2c19b95c577"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[1.02354078] [1.96896443]\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"7d4b8e","input":"plt.figure(figsize=(10,5))\ny_vals = b * x_val + a\nplt.plot(x_val, y_vals, '--')\n\nplt.scatter(x_val,y_val, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"elapsed":229,"status":"ok","timestamp":1627499225902,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"V9wnGeT_eou8","outputId":"1dc573e8-ebd4-4861-94e0-ff1a6d4229d3"},"output":{"0":{"data":{"image/png":"c3bd804872d964193004f8845ae384fdb8a430be","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":342,"width":625},"needs_background":"light"},"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"e9cbc7","input":"from sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":885,"status":"ok","timestamp":1627498630865,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"jkPf0bt4a-sV","outputId":"422ab4c2-fceb-490e-ca2d-b45f09b26cff"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[1.02354075] [1.96896447]\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"d6d257","input":"# initialize your random seed to ensure reproducibility of your result\nnp.random.seed(42) # Why 42 (It works well for computer science) - https://medium.com/@leticia.b/the-story-of-seed-42-874953452b94\n\n# randomly generate x which is a vector of 100 points \nx = np.random.rand(100, 1)\n\n# define exact linear function y = 1 + 2x + epsilon where epsilon (0.1*random numbers)\ny = 1 + 2 * x + .1 * np.random.randn(100, 1)","metadata":{"executionInfo":{"elapsed":219,"status":"ok","timestamp":1627498568931,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"BYHvay0xa-sK"},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"48f25d","input":"y","output":{"0":{"data":{"text/plain":"array([[1.75778494],\n       [2.87152788],\n       [2.47316396],\n       [1.99856008],\n       [1.29007009],\n       [1.3477003 ],\n       [1.26395663],\n       [2.68052527],\n       [2.12138066],\n       [2.36596945],\n       [1.1327092 ],\n       [2.97269482],\n       [2.61190926],\n       [1.47600496],\n       [1.37335769],\n       [1.46367352],\n       [1.53827918],\n       [2.01674665],\n       [1.82467922],\n       [1.43610679],\n       [2.25331782],\n       [1.30509325],\n       [1.58480064],\n       [1.70926497],\n       [1.77060289],\n       [2.52828739],\n       [1.36507611],\n       [1.94824115],\n       [2.16870057],\n       [1.13330591],\n       [2.40370829],\n       [1.35850603],\n       [1.15585823],\n       [2.89032648],\n       [2.73938694],\n       [2.61414331],\n       [1.61525056],\n       [1.44166844],\n       [2.34922996],\n       [1.91045972],\n       [1.24060529],\n       [1.87348602],\n       [1.18305932],\n       [2.89383411],\n       [1.59666316],\n       [2.23410582],\n       [1.76370158],\n       [1.89995094],\n       [2.15210627],\n       [1.58875447],\n       [2.84011562],\n       [2.49363587],\n       [2.88896302],\n       [2.73930714],\n       [2.04073361],\n       [2.85060477],\n       [1.07075463],\n       [1.43932497],\n       [0.99851215],\n       [1.8056541 ],\n       [1.69902925],\n       [1.51049191],\n       [2.73882674],\n       [1.59042022],\n       [1.58461501],\n       [2.21610644],\n       [1.12110013],\n       [2.62285735],\n       [1.17508957],\n       [3.05195616],\n       [2.42079447],\n       [1.2653857 ],\n       [1.06323839],\n       [2.66062132],\n       [2.43876397],\n       [2.49265916],\n       [2.47453822],\n       [1.17131467],\n       [1.7462387 ],\n       [1.16030298],\n       [2.9127843 ],\n       [2.29397955],\n       [1.5426657 ],\n       [1.19277206],\n       [1.52449648],\n       [1.7290751 ],\n       [2.57507191],\n       [2.19304671],\n       [2.8707631 ],\n       [1.98570794],\n       [1.32139451],\n       [2.61616887],\n       [2.49703129],\n       [2.04718078],\n       [2.45298292],\n       [1.90601016],\n       [2.03775549],\n       [1.88919723],\n       [1.07850733],\n       [1.29850118]])"},"exec_count":4,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"06e5da","input":"# Shuffles the indices\nidx = np.arange(100)\nnp.random.shuffle(idx)\n\n# Uses first 80 random indices for train\ntrain_idx = idx[:80]\n\n# Uses the remaining indices for validation\nval_idx = idx[80:]\n\n# Generates train and validation sets\nx_train, y_train = x[train_idx], y[train_idx]\nx_val, y_val = x[val_idx], y[val_idx]\n","metadata":{"executionInfo":{"elapsed":235,"status":"ok","timestamp":1627498579768,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"_ntl2sX3a-sL"},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"1f8c16","input":"idx","output":{"0":{"data":{"text/plain":"array([76, 83, 80, 98,  2, 77, 71, 84, 89, 50, 40, 51, 67, 86, 37, 49,  4,\n       10, 69, 81,  9, 54, 55, 87, 64, 44, 90, 75, 33, 30, 93, 95, 14, 61,\n       11, 13, 15,  7,  0, 19, 35,  6, 12, 65, 70, 88, 56, 58, 28, 38, 91,\n       42,  8, 73, 39, 85, 25, 92, 41, 26,  1, 22, 21, 46, 74, 79, 78, 72,\n       57, 53, 24, 17, 66, 32, 31, 62, 59, 52, 82, 23, 36,  5, 45, 99, 43,\n       16, 48, 94, 34,  3, 18, 47, 60, 68, 63, 27, 96, 29, 20, 97])"},"exec_count":6,"output_type":"execute_result"}},"pos":7,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"14b3bd","input":"train_idx","output":{"0":{"data":{"text/plain":"array([76, 83, 80, 98,  2, 77, 71, 84, 89, 50, 40, 51, 67, 86, 37, 49,  4,\n       10, 69, 81,  9, 54, 55, 87, 64, 44, 90, 75, 33, 30, 93, 95, 14, 61,\n       11, 13, 15,  7,  0, 19, 35,  6, 12, 65, 70, 88, 56, 58, 28, 38, 91,\n       42,  8, 73, 39, 85, 25, 92, 41, 26,  1, 22, 21, 46, 74, 79, 78, 72,\n       57, 53, 24, 17, 66, 32, 31, 62, 59, 52, 82, 23])"},"exec_count":7,"output_type":"execute_result"}},"pos":8,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"6922e7","input":"val_idx","output":{"0":{"data":{"text/plain":"array([36,  5, 45, 99, 43, 16, 48, 94, 34,  3, 18, 47, 60, 68, 63, 27, 96,\n       29, 20, 97])"},"exec_count":8,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"463d6a","input":"plt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the validation set \nplt.subplot(1,2,2)\nplt.scatter(x_val,x_val)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"elapsed":524,"status":"ok","timestamp":1627498583872,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"W1JhyZ_Na-sM","outputId":"909f5fd9-c203-45cf-d41f-58b09bb727ef"},"output":{"0":{"data":{"image/png":"c6f83e5e3f352ba510dd00f5ea1f95e01eb68f8f","text/plain":"<Figure size 720x360 with 2 Axes>"},"exec_count":9,"metadata":{"image/png":{"height":342,"width":621},"needs_background":"light"},"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"06f061","input":"## The results!\n\nThey match up to 6 decimal places — we have a fully working implementation of linear regression using Numpy.","metadata":{"id":"yE4V3P9aa-sX"},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"11c705","input":"## plot the train and validation sets","metadata":{"id":"DCCwyhkya-sM"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"2f6689","input":"# Linear regression using NumPy","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"3276e3","input":"## split data into train and validation sets (80/20)","metadata":{"id":"irEOBQoca-sL"},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"46b040","input":"## Data Generation","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"669cc2","input":"## check our results use Scikit-learn's linear regression\n\nJust to make sure we haven’t done any mistakes in our code, we can use Scikit-Learn’s Linear Regression to fit the model and compare the coefficients.\n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"f6423c","input":"### For each epoch, there are 5 training steps:\n* Compute model’s predictions \n* Compute the error (the difference between the actual value and predicted value) \n* Compute the loss ( mean square error = the average of (error)^2)\n* Compute the gradients for every parameter (require calculus)\n* Update the parameters a and b","metadata":{"id":"Tmk5nl_Va-sQ"},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"fd3ff9","input":"## linear regression using numpy ","metadata":{"id":"gi4pQP8Ia-sO"},"pos":12,"type":"cell"}
{"id":0,"time":1659023160103,"type":"user"}
{"last_load":1659704386363,"type":"file"}